import React, { useState, useRef } from "react";

const Buttons = ({ transcription, dates, setTranscription, addToCalendar, sendEmail }) => {
Â  const [isRecording, setIsRecording] = useState(false);
Â  const [status, setStatus] = useState("Processing Status: Idle");
Â  const recognitionRef = useRef(null); // ðŸ”¹ Store recognition instance

Â  const startRecording = () => {
Â  Â  if (!("webkitSpeechRecognition" in window)) {
Â  Â  Â  alert("Your browser does not support speech recognition.");
Â  Â  Â  return;
Â  Â  }

Â  Â  const recognition = new window.webkitSpeechRecognition();
Â  Â  recognition.continuous = true;
Â  Â  recognition.interimResults = true;
Â  Â  recognition.lang = "en-US";
Â  Â  recognitionRef.current = recognition; // ðŸ”¹ Store instance in ref
Â  Â  setIsRecording(true);
Â  Â  setStatus("ðŸŽ™ Recording...");

Â  Â  recognition.onresult = (event) => {
Â  Â  Â  let transcript = "";
Â  Â  Â  for (let i = 0; i < event.results.length; i++) {
Â  Â  Â  Â  transcript += event.results[i][0].transcript + " ";
Â  Â  Â  }
Â  Â  Â  setTranscription(transcript.trim());
Â  Â  };

Â  Â  recognition.start();
Â  };

Â  const stopRecording = () => {
Â  Â  if (recognitionRef.current) {
Â  Â  Â  recognitionRef.current.stop();
Â  Â  Â  setIsRecording(false);
Â  Â  Â  setStatus("ðŸ›‘ Processing...");
Â  Â  Â  setTimeout(() => setStatus("âœ… Idle"), 1000);
Â  Â  }
Â  };

Â  return (
Â  Â  <div>
Â  Â  Â  <button onClick={startRecording} disabled={isRecording}>
Â  Â  Â  Â  ðŸŽ™ Start Recording
Â  Â  Â  </button>
Â  Â  Â  <button onClick={stopRecording} disabled={!isRecording}>
Â  Â  Â  Â  ðŸ›‘ Stop Recording
Â  Â  Â  </button>
Â  Â  Â  <p id="status">{status}</p>
Â  Â  </div>
Â  );
};

export default Buttons;
